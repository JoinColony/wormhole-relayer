import { utils } from 'ethers';
import { Log } from '@ethersproject/providers';

import { AdditionalProperties, ContractEvent } from '~types';

import { blocksMap } from '~blockListener';

import providers from '~providers';

export const mapLogToContractEvent = async (
  log: Log,
  iface: utils.Interface,
  // Additional properties to attach to the contract event
  additionalProperties: AdditionalProperties,
): Promise<ContractEvent | null> => {

  const provider = providers[additionalProperties.chainId];
  const {
    transactionHash,
    logIndex,
    blockNumber,
    address: eventContractAddress,
  } = log;

  try {
    // Attempt to first get a block from the map as we might have already fetched its info
    let block = blocksMap.get(blockNumber);
    if (!block) {
      block = await provider.getBlock(blockNumber);
      if (!block) {
        throw new Error(`Block ${blockNumber} not found from provider`);
      }
    }

    const { hash: blockHash, timestamp } = block;
    const parsedLog = iface.parseLog(log);

    return {
      ...parsedLog,
      blockNumber,
      transactionHash,
      logIndex,
      contractAddress: eventContractAddress,
      blockHash,
      timestamp,
      ...additionalProperties,
    };
  } catch (error) {
    /*
     * Silent Error
     *
     * This does not need to be loud since, at times, you'll map through a whole
     * lot of events which might not know how to interface with since they were
     * generated by other contracts
     */
    return null;
  }
};

